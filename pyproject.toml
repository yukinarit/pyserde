[tool.poetry]
name = "pyserde"
version = "0.0.0"  # using poetry-dynamic-versioning
description = "Yet another serialization library on top of dataclasses"
authors = ["yukinarit <yukinarit84@gmail.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/yukinarit/pyserde"
homepage = "https://github.com/yukinarit/pyserde"
packages = [
    { include = "serde" },
]
classifiers=[
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]

[tool.poetry.dependencies]
python = "^3.9.0"
typing_inspect = ">=0.4.0"
typing_extensions = { version = ">=4.1.0,<4.13.0" }
casefy = "*"
jinja2 = "*"
msgpack = { version = "*", markers = "extra == 'msgpack' or extra == 'all'", optional = true }
tomli = { version = "*", markers = "extra == 'toml' or extra == 'all'", optional = true }
tomli-w = { version = "*", markers = "extra == 'toml' or extra == 'all'", optional = true }
pyyaml = { version = "*", markers = "extra == 'yaml' or extra == 'all'", optional = true }
numpy = [
  { version = ">1.21.0,<3.0.0", markers = "python_version ~= '3.9.0' and (extra == 'numpy' or extra == 'all')", optional = true },
  { version = ">1.22.0,<3.0.0", markers = "python_version ~= '3.10' and (extra == 'numpy' or extra == 'all')", optional = true },
  { version = ">1.22.0,<3.0.0", markers = "python_version ~= '3.11' and (extra == 'numpy' or extra == 'all')", optional = true },
  { version = ">1.22.0,<3.0.0", markers = "python_version ~= '3.12' and (extra == 'numpy' or extra == 'all')", optional = true },
  { version = ">1.22.0,<3.0.0", markers = "python_version ~= '3.13' and (extra == 'numpy' or extra == 'all')", optional = true },
]
jaxtyping = { version = "<0.3.0", markers = "extra == 'jaxtyping' or extra == 'all'", optional = true }
orjson = { version = "*", markers = "extra == 'orjson' or extra == 'all'", optional = true }
plum-dispatch = ">=2.3"
beartype = ">=0.18.4"
sqlalchemy = { version = ">2", markers = "extra == 'sqlalchemy' or extra == 'all'", optional = true }

[tool.poetry.dev-dependencies]
pyyaml = "*"
tomli = { version = "*", markers = "python_version <= '3.11.0'" }
tomli-w = "*"
msgpack = "*"
numpy = [
  { version = ">1.21.0,<3.0.0", markers = "python_version ~= '3.9.0'" },
  { version = ">1.22.0,<3.0.0", markers = "python_version ~= '3.10'" },
  { version = ">1.22.0,<3.0.0", markers = "python_version ~= '3.11'" },
  { version = ">1.22.0,<3.0.0", markers = "python_version ~= '3.12'" },
  { version = ">1.22.0,<3.0.0", markers = "python_version ~= '3.13'" },
]
mypy = "==1.14.0"
pytest = "*"
pytest-cov = "*"
pytest-watch = "*"
pytest-flake8 = "*"
coverage = "==7.6.8"
pdoc = "^15"
more-itertools = "~=10.5.0"
pre-commit = "==v4.1.0"
pytest-xdist = "^3.5.0"
types-PyYAML = "^6.0.9"
msgpack-types = "^0.5"
envclasses = "^0.3.1"
jedi = "*"
jaxtyping = "<0.3.0"

[tool.poetry.extras]
msgpack = ["msgpack"]
numpy = ["numpy"]
toml = ["tomli", "tomli-w"]
yaml = ["pyyaml"]
orjson = ["orjson"]
sqlalchemy = ["sqlalchemy"]
jaxtyping = ["jaxtyping"]
all = ["msgpack", "tomli", "tomli-w", "pyyaml", "numpy", "orjson", "sqlalchemy", "jaxtyping"]

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = true
style = "pep440"

[tool.black]
target_version = ["py312"]
line_length = 100

[tool.pyright]
include = [
  "examples",
  "serde/core.py",
  "serde/compat.py",
  "serde/inspect.py",
  "serde/json.py",
  "serde/se.py",
  "serde/de.py",
  "serde/msgpack.py",
  "serde/toml.py",
  "serde/yaml.py",
  "serde/pickle.py",
  "tests/common.py",
  "tests/imported.py",
  "tests/test_custom.py",
  "tests/test_kwonly.py",
  "tests/test_flatten.py",
  "tests/test_lazy_type_evaluation.py",
  "tests/test_type_check.py",
  "tests/data.py",
]
exclude = [
  "serde/numpy.py",
  "bench",
  "tests/test_basics.py",
  "tests/test_core.py",
  "tests/test_legacy_custom.py",
  "tests/test_literal.py",
  "tests/test_numpy.py",
  "tests/test_union.py",
  "tests/test_sqlalchemy.py",
  "serde/__init__.py"
]
pythonVersion = "3.12"
reportMissingImports = false

[tool.mypy]
strict = true
ignore_missing_imports = true
exclude = [
  "serde/numpy.py",
  "examples/alias.py",
  "examples/generics_pep695.py",
  "bench",
  "tests/common.py",
  "tests/test_basics.py",
  "tests/test_core.py",
  "tests/test_legacy_custom.py",
  "tests/test_literal.py",
  "tests/test_numpy.py",
  "tests/test_union.py",
  "tests/test_sqlalchemy.py",
]

[[tool.mypy.overrides]]
# to avoid complaints about generic type ndarray
module = "examples.type_numpy_jaxtyping"
ignore_errors = true

[tool.ruff]
select = [
  "E", # pycodestyle errors
  "W", # pycodestyle warnings
  "F", # pyflakes
  "C", # flake8-comprehensions
  "B", # flake8-bugbear
  "NPY201", # numpy2-deprecation
]
ignore = ["B904"]
line-length = 100

[tool.ruff.lint.mccabe]
max-complexity = 30

[tool.ruff.per-file-ignores]
# https://docs.kidger.site/jaxtyping/faq/#flake8-or-ruff-are-throwing-an-error
"examples/type_numpy_jaxtyping.py" = ["F722"]
